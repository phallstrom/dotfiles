""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin()

Plug 'airblade/vim-gitgutter'           " shows a git diff in the gutter
Plug 'altercation/vim-colors-solarized' " precision colorscheme
Plug 'godlygeek/tabular'                " text filtering and alignment
Plug 'janko-m/vim-test'                 " test runner
Plug 'phallstrom/vim-sailfish'
Plug 'rking/ag.vim'                     " plugin for the_silver_searcher
Plug 'scrooloose/nerdtree'              " tree explorer
Plug 'sjl/gundo.vim'                    " graph your vim undo tree
Plug 'thoughtbot/pick.vim'              " functions for using pick
Plug 'tpope/vim-commentary'             " comment stuff out
Plug 'tpope/vim-endwise'                " wisely add 'end' in ruby, endfunction/endif/more in vim script, etc
Plug 'tpope/vim-fugitive'               " git wrapper
Plug 'tpope/vim-rails'                  " ruby on rails power tools
Plug 'vim-ruby/vim-ruby'                " vim/ruby configuration
Plug 'ydeweerdt/file-line'              " enabling opening a file in a given line
Plug 'kana/vim-textobj-user'            " create your own text objects
Plug 'nelstrom/vim-textobj-rubyblock'   " custom text object for selecting ruby blocks
Plug 'tpope/vim-surround'               " quoting/parenthesizing made simple
Plug 'chriskempson/base16-vim'          " color schemes, https://chriskempson.github.io/base16/
Plug 'vim-syntastic/syntastic'          " syntax checking hacks for vim
Plug 'editorconfig/editorconfig-vim'    " EditorConfig plugin for Vim

call plug#end()
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set t_Co=256

set nocompatible      " We're running Vim, not Vi!
set synmaxcol=500     " don't try to highlight long lines
compiler ruby         " Enable compiler support for ruby

set background=dark
colorscheme base16-oceanicnext


set backspace=2
set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2
set autoindent
set nowrap
set nrformats=

set backupdir=$HOME/.vimbackup,.
set directory=$HOME/.vimswap,.

syntax on

au FocusLost * :wa

set ignorecase
set smartcase
set scrolloff=2
set ttyfast
set hidden
set wildmenu
set wildmode=list:longest
nnoremap <leader>nt :NERDTreeToggle<enter>

source $VIMRUNTIME/macros/matchit.vim

nnoremap <C-p> :call PickFile()<CR>
let g:pick_executable = "pick"
" nnoremap <Leader>p :call PickFile()<CR>
" nnoremap <Leader>s :call PickFileSplit()<CR>
" nnoremap <Leader>v :call PickFileVerticalSplit()<CR>
" nnoremap <Leader>t :call PickFileTab()<CR>
nnoremap <Leader>b :call PickBuffer()<CR>

" https://github.com/tpope/vim-commentary/commit/4dcfc318e0b02fdbb0c2d9ff77cf3562b46eea25
xmap \\  <Plug>Commentary
nmap \\  <Plug>Commentary

let g:ag_working_path_mode="r"

set updatetime=250

nmap <silent> <leader>s :TestNearest<CR>
nmap <silent> <leader>t :TestFile<CR>
nmap <silent> <leader>T :TestSuite<CR>

set mouse=a
vnoremap <Leader>c "*y
noremap <Leader>v "*p

set nofixeol

set formatoptions+=j " Delete comment character when joining commented lines

au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |
    \ exe "normal g'\"" | endif

let g:omni_sql_no_default_maps = 1 " disable SQL autocompletion entirely

" To ensure that EditorConfig plugin works well with Tim Pope's fugitive
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" Syntastic 
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1 " always stick errors into loc list
let g:syntastic_auto_loc_list = 2            " auto close error window
let g:syntastic_check_on_open = 0            " no checks on open
let g:syntastic_check_on_wq = 0              " no checks on quit
let g:syntastic_loc_list_height = 5          " height of the location list
let g:syntastic_aggregate_errors = 1         " run all checkers
let g:syntastic_auto_jump = 0                " don't jump automatically

let g:syntastic_ruby_checkers     = ['mri', 'rubocop']
let g:syntastic_ruby_rubocop_exec = 'rubocop'

if filereadable($HOME."/.vimrc_local")
  source $HOME/.vimrc_local
endif
